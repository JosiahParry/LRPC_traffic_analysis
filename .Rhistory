all <- read.table(file = "Data/All_LRPCcounts.txt", header = TRUE ,
sep=",", stringsAsFactors = FALSE) %>%
select(-FID)
# Read in LRPC counter locations
all <- read.table(file = "Data/All_LRPCcounts.txt", header = TRUE ,
sep=",", stringsAsFactors = FALSE) %>%
select(-FID)
library(tidyverse)
all <- read.table(file = "Data/All_LRPCcounts.txt", header = TRUE ,
sep=",", stringsAsFactors = FALSE) %>%
select(-FID)
nh_roads <- read.csv("Data/NH_roads.csv", stringsAsFactors = FALSE)
getwd
getwd()
nh_roads <- read.csv("../GIS/geo_spat/NH_roads/NH_roads.csv", stringsAsFactors = FALSE)
lrpc_towns <- unique(all$Town)
lrpc_towns
# Filter
lrpc_roads <- nh_roads %>%
filter(TOWN_NAME %in% lrpc_towns)
# View filtered town names
unique(lrpc_roads$TOWN_NAME)
nh_roads <- read_csv("../GIS/geo_spat/NH_roads/NH_roads.csv", stringsAsFactors = FALSE)
?read_csv
nh_roads <- read_csv("../GIS/geo_spat/NH_roads/NH_roads.csv")
all <- read_csv(file = "Data/All_LRPCcounts.txt", header = TRUE) %>%
select(-FID)
all <- read_csv(file = "Data/All_LRPCcounts.txt") %>%
select(-FID)
nh_roads <- read_csv("../GIS/geo_spat/NH_roads/NH_roads.csv")
lrpc_towns <- unique(all$Town)
lrpc_towns
lrpc_roads <- nh_roads %>%
filter(TOWN_NAME %in% lrpc_towns)
unique(lrpc_roads$TOWN_NAME)
lrpc_roads <- read_csv("../GIS/geo_spat/lrpc_roads/lrpc_roads.csv")
lrpc_roads <- read_csv("../GIS/geo_spat/lrpc_roads/lrpc_roads.csv")
glimpse(lrpc_roads)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
# Read in LRPC counter locations
all <- read_csv(file = "Data/All_LRPCcounts.txt") %>%
select(-FID)
# Read in the NH GRANIT attribute table
nh_roads <- read_csv("../GIS/geo_spat/NH_roads/NH_roads.csv")
# Isolate LRPC towns
lrpc_towns <- unique(all$Town)
# Print LRPC towns
lrpc_towns
# Filter
lrpc_roads <- nh_roads %>%
filter(TOWN_NAME %in% lrpc_towns)
# View filtered town names
unique(lrpc_roads$TOWN_NAME)
# Load exported file from QGIS
lrpc_roads <- read_csv("../GIS/geo_spat/lrpc_roads/lrpc_roads.csv")
lrpc_roads <- lrpc_roads %>%
mutate(COMBNUMS = strsplit(COMBNUMS, "[, ]+")) %>%
unnest(COMBNUMS)
lrpc_roads$COMBNUMS <- lrpc_roads$COMBNUMS %>% str_replace_all(":", "")
library(tidyverse)
lrpc_roads$COMBNUMS <- lrpc_roads$COMBNUMS %>% str_replace_all(":", "")
library(tidyverse)
lrpc_roads$COMBNUMS <- lrpc_roads$COMBNUMS %>% str_replace_all(":", "")
lrpc_roads$COMBNUMS <- lrpc_roads$COMBNUMS %>% stringr::str_replace_all(":", "")
head(lrpc_roads$COMBNUMS, 20)
colnames(lrpc_roads)
library(tidyverse)
library(stringr)
str_replace_all(colnames(lrpc_roads), "_", "")
?str_replace_all
str_replace(colnames(lrpc_roads), "_", "")
head(lrpc_roads$COMBNUMS, 20)
head(lrpc_roads$COMBNUMS, n = 20)
---
title: "LRPC Traffic Counter Location Cleaning"
output: html_notebook
---
```{r echo = FALSE}
library(tidyverse)
```
The goal of this notebook is to clean, and standardize road names associated with traffic counter locations used by the Lakes Region Planning Commision (LRPC) of New Hampshire. The current data used by the **LRPC** is not in accordance with standard practice of the *NH DOT* and therefore difficult to associate with shapefiles provided by *NH GRANIT*, and other data provided by *NH DOT*.
The first step in this is to read in all of the counter locations used by the *LRPC*, then the attribute table of the *NH GRANIT* roads shapefile. The first aim is to limit the NH Roads (attribute table of NH GRANIT roads shapefile) to the same towns as listed in the *LRPC* counter attribute table.
```{r}
# Read in LRPC counter locations
all <- read_csv(file = "Data/All_LRPCcounts.txt") %>%
select(-FID)
# Read in the NH GRANIT attribute table
nh_roads <- read_csv("../GIS/geo_spat/NH_roads/NH_roads.csv")
```
In order to match the towns, the towns within the `all` (LRPC counters) need to be isolated, and `nh_roads` (NH GRANIT attribute table) should be filtered to only include those towns.
```{r}
# Isolate LRPC towns
lrpc_towns <- unique(all$Town)
# Print LRPC towns
lrpc_towns
```
Note there are 30 towns (excluding the blank `""`) that are covered in the LRPC data. Now the `nh_roads` must be filtered. There should only be 30 towns in the filtered data.
```{r}
# Filter
lrpc_roads <- nh_roads %>%
filter(TOWN_NAME %in% lrpc_towns)
# View filtered town names
unique(lrpc_roads$TOWN_NAME)
```
This method of matching proved to be immensely difficult. In order to most effectively match road to counter I loaded the *LRPC Counter* shapefile and the *NH Roads* shapefile into the open source geographic information system (GIS) platform **QGIS** (Quantum GIS). Initially I planned to perform an intersection as a method of geospatially joining the data, however, as with most geospatial data, the two vector files did not overlap perfectly, as not all data is going to be perfectly oriented in space. Thus required the employment of a nearest neighbor join using the *NNJoin* plugin which can be downloaded within *QGIS*. I then selectively deleted redundant fields and changed a few field names. The shapefile was exported to a **csv** and will be cleaned with **R**.
```{r}
# Load exported file from QGIS
lrpc_roads <- read_csv("../GIS/geo_spat/lrpc_roads/lrpc_roads.csv")
```
Upon inspection of the data the field `COMBNUMS` contains some observations with counter names that are associated with another counter in the format `XXXXXXXX:XXXXXXXX,XXXXXXXX`. In order to have the proper data related to each counter, the observations with the above mentioned format must be split into 3 observations: one for each counter name in the above mentioned format.
```{r}
lrpc_roads <- lrpc_roads %>%
mutate(COMBNUMS = strsplit(COMBNUMS, "[, ]+")) %>%
unnest(COMBNUMS)
lrpc_roads$COMBNUMS <- lrpc_roads$COMBNUMS %>% stringr::str_replace_all(":", "")
```
Preview the newly formatted `lrpc_roads$COMBNUMS`:
```{r}
head(lrpc_roads$COMBNUMS, n = 20)
```
lrpc_roads <- lrpc_roads %>%
mutate(COMBNUMS = strsplit(COMBNUMS, "[, ]+")) %>%
unnest(COMBNUMS)
lrpc_roads$COMBNUMS <- lrpc_roads$COMBNUMS %>% stringr::str_replace_all(":", "")
head(lrpc_roads$COMBNUMS, n = 20)
colnames(lrpc_roads) <- stringr::str_replace("_", "")
colnames(lrpc_roads) <- lrpc_roads %>% stringr::str_replace("_", "")
---
title: "LRPC Traffic Counter Location Cleaning"
output: html_notebook
---
```{r echo = FALSE}
library(tidyverse)
```
The goal of this notebook is to clean, and standardize road names associated with traffic counter locations used by the Lakes Region Planning Commision (LRPC) of New Hampshire. The current data used by the **LRPC** is not in accordance with standard practice of the *NH DOT* and therefore difficult to associate with shapefiles provided by *NH GRANIT*, and other data provided by *NH DOT*.
The first step in this is to read in all of the counter locations used by the *LRPC*, then the attribute table of the *NH GRANIT* roads shapefile. The first aim is to limit the NH Roads (attribute table of NH GRANIT roads shapefile) to the same towns as listed in the *LRPC* counter attribute table.
```{r}
# Read in LRPC counter locations
all <- read_csv(file = "Data/All_LRPCcounts.txt") %>%
select(-FID)
# Read in the NH GRANIT attribute table
nh_roads <- read_csv("../GIS/geo_spat/NH_roads/NH_roads.csv")
```
In order to match the towns, the towns within the `all` (LRPC counters) need to be isolated, and `nh_roads` (NH GRANIT attribute table) should be filtered to only include those towns.
```{r}
# Isolate LRPC towns
lrpc_towns <- unique(all$Town)
# Print LRPC towns
lrpc_towns
```
Note there are 30 towns (excluding the blank `""`) that are covered in the LRPC data. Now the `nh_roads` must be filtered. There should only be 30 towns in the filtered data.
```{r}
# Filter
lrpc_roads <- nh_roads %>%
filter(TOWN_NAME %in% lrpc_towns)
# View filtered town names
unique(lrpc_roads$TOWN_NAME)
```
This method of matching proved to be immensely difficult. In order to most effectively match road to counter I loaded the *LRPC Counter* shapefile and the *NH Roads* shapefile into the open source geographic information system (GIS) platform **QGIS** (Quantum GIS). Initially I planned to perform an intersection as a method of geospatially joining the data, however, as with most geospatial data, the two vector files did not overlap perfectly, as not all data is going to be perfectly oriented in space. Thus required the employment of a nearest neighbor join using the *NNJoin* plugin which can be downloaded within *QGIS*. I then selectively deleted redundant fields and changed a few field names. The shapefile was exported to a **csv** and will be cleaned with **R**.
```{r}
# Load exported file from QGIS
lrpc_roads <- read_csv("../GIS/geo_spat/lrpc_roads/lrpc_roads.csv")
```
Upon inspection of the data the field `COMBNUMS` contains some observations with counter names that are associated with another counter in the format `XXXXXXXX:XXXXXXXX,XXXXXXXX`. In order to have the proper data related to each counter, the observations with the above mentioned format must be split into 3 observations: one for each counter name in the above mentioned format.
```{r}
lrpc_roads <- lrpc_roads %>%
mutate(COMBNUMS = strsplit(COMBNUMS, "[, ]+")) %>%
unnest(COMBNUMS)
lrpc_roads$COMBNUMS <- lrpc_roads$COMBNUMS %>% stringr::str_replace_all(":", "")
```
Preview the newly formatted `lrpc_roads$COMBNUMS`:
```{r}
head(lrpc_roads$COMBNUMS, n = 20)
colnames(lrpc_roads) <- colnames(lrpc_roads) %>% stringr::str_replace("_", "")
View(lrpc_roads)
filter(lrpc_roads, SHLDR_TYP != SHLDR_TY_)
glimpse(filter(lrpc_roads, SHLDR_TYP != SHLDR_TY_))
filter(lrpc_roads, COUNTER != COMBNUMS)
count_13 <- read_csv("data/clean_counts/counts_13.csv")
count_14 <- read_csv("data/clean_counts/counts_14.csv")
colnames(lrpc_roads) <- colnames(lrpc_roads) %>% stringr::str_replace("_", "")
x <- left_join(count_13, lrpc_roads, by = c("counter" = "CNTRNUM")) %>%
distinct(counter, date_time, total, .keep_all = T)
x <- left_join(count_13, lrpc_roads, by = c("counter" = "COMBNUMS")) %>%
distinct(counter, date_time, total, .keep_all = T)
View(x)
unique(lrpc_roads$COMBNUMS)
count(unique(lrpc_roads$COMBNUMS))
length(unique(lrpc_roads$COMBNUMS))
length(na.omit(x))
x <- inner_join(count_13, lrpc_roads, by = c("counter" = "COMBNUMS")) %>%
distinct(counter, date_time, total, .keep_all = T)
x <- full_join(count_13, lrpc_roads, by = c("counter" = "COMBNUMS")) %>%
distinct(counter, date_time, total, .keep_all = T)
?inner_join
x <- left_join(count_13, lrpc_roads, by = c("counter" = "COMBNUMS")) %>%
distinct(counter, date_time, total, .keep_all = T)
?distinct
x <- left_join(count_13, lrpc_roads, by = c("counter" = "COMBNUMS")) %>%
distinct(COMBNUMS, date_time, total, .keep_all = T)
x <- left_join(count_13, lrpc_roads, by = c("counter" = "COMBNUMS")) %>%
distinct(counter, date_time, total, .keep_all = T)
View(x)
View(lrpc_roads)
x <- left_join(count_13, lrpc_roads, by = c("counter" = "COUNTER")) %>%
distinct(counter, date_time, total, .keep_all = T)
View(x)
length(na.omit(x))
x <- left_join(count_13, lrpc_roads, by = c("counter" = "COMBNUMS")) %>%
distinct(counter, date_time, total, .keep_all = T)
